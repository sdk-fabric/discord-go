
// ChannelMessageTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type ChannelMessageTag struct {
    internal *sdkgen.TagAbstract
}



// GetAll Retrieves the messages in a channel
func (client *ChannelMessageTag) GetAll(channelId string, around string, before string, after string, limit int) (Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId

    queryParams := make(map[string]interface{})
    queryParams["around"] = around
    queryParams["before"] = before
    queryParams["after"] = after
    queryParams["limit"] = limit

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages", pathParams))
    if err != nil {
        return Message{}, err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return Message{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Message{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Message{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response Message
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return Message{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return Message{}, errors.New("the server returned an unknown status code")
    }
}

// Get Retrieves a specific message in the channel. Returns a message object on success.
func (client *ChannelMessageTag) Get(channelId string, messageId string) (Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId
    pathParams["message_id"] = messageId

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages/:message_id", pathParams))
    if err != nil {
        return Message{}, err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return Message{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Message{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Message{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response Message
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return Message{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return Message{}, errors.New("the server returned an unknown status code")
    }
}

// Create Post a message to a guild text or DM channel. Returns a message object. Fires a Message Create Gateway event. See message formatting for more information on how to properly format messages.
func (client *ChannelMessageTag) Create(channelId string) (Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages", pathParams))
    if err != nil {
        return Message{}, err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("POST", u.String(), nil)
    if err != nil {
        return Message{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Message{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Message{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response Message
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return Message{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return Message{}, errors.New("the server returned an unknown status code")
    }
}

// Remove Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
func (client *ChannelMessageTag) Remove(channelId string, messageId string) (error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId
    pathParams["message_id"] = messageId

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages/:message_id", pathParams))
    if err != nil {
        return err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        return nil
    }

    switch resp.StatusCode {
        default:
            return errors.New("the server returned an unknown status code")
    }
}

// Crosspost Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the MANAGE_MESSAGES permission, for all other messages, to be present for the current user.
func (client *ChannelMessageTag) Crosspost(channelId string, messageId string) (Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId
    pathParams["message_id"] = messageId

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages/:message_id/crosspost", pathParams))
    if err != nil {
        return Message{}, err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("POST", u.String(), nil)
    if err != nil {
        return Message{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Message{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Message{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response Message
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return Message{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return Message{}, errors.New("the server returned an unknown status code")
    }
}



func NewChannelMessageTag(httpClient *http.Client, parser *sdkgen.Parser) *ChannelMessageTag {
	return &ChannelMessageTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
