
// ChannelTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type ChannelTag struct {
    internal *sdkgen.TagAbstract
}

func (client *ChannelTag) Message() *ChannelMessageTag {
    return NewChannelMessageTag(client.internal.HttpClient, client.internal.Parser)
}

func (client *ChannelTag) Reaction() *ChannelReactionTag {
    return NewChannelReactionTag(client.internal.HttpClient, client.internal.Parser)
}



// Get Get a channel by ID. Returns a channel object.
func (client *ChannelTag) Get(channelId string) (Channel, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id", pathParams))
    if err != nil {
        return Channel{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return Channel{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Channel{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Channel{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response Channel
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return Channel{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 400:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return Channel{}, err
            }

            return Channel{}, &ErrorException{
                Payload: response,
            }
        case 404:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return Channel{}, err
            }

            return Channel{}, &ErrorException{
                Payload: response,
            }
        case 500:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return Channel{}, err
            }

            return Channel{}, &ErrorException{
                Payload: response,
            }
        default:
            return Channel{}, errors.New("the server returned an unknown status code")
    }
}

// GetPins Returns all pinned messages in the channel as an array of message objects.
func (client *ChannelTag) GetPins(channelId string) ([]Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/pins", pathParams))
    if err != nil {
        return []Message{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return []Message{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return []Message{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return []Message{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response []Message
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return []Message{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 400:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return []Message{}, err
            }

            return []Message{}, &ErrorException{
                Payload: response,
            }
        case 404:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return []Message{}, err
            }

            return []Message{}, &ErrorException{
                Payload: response,
            }
        case 500:
            var response Error
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return []Message{}, err
            }

            return []Message{}, &ErrorException{
                Payload: response,
            }
        default:
            return []Message{}, errors.New("the server returned an unknown status code")
    }
}



func NewChannelTag(httpClient *http.Client, parser *sdkgen.Parser) *ChannelTag {
	return &ChannelTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
