
// ChannelReactionTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type ChannelReactionTag struct {
    internal *sdkgen.TagAbstract
}



// GetAll 
func (client *ChannelReactionTag) GetAll(channelId string, messageId string, emoji string, _type int, after string, limit int) ([]User, error) {
    pathParams := make(map[string]interface{})
    pathParams["channel_id"] = channelId
    pathParams["message_id"] = messageId
    pathParams["emoji"] = emoji

    queryParams := make(map[string]interface{})
    queryParams["type"] = _type
    queryParams["after"] = after
    queryParams["limit"] = limit

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/channels/:channel_id/messages/:message_id/reactions/:emoji", pathParams))
    if err != nil {
        return []User{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return []User{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return []User{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return []User{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response []User
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return []User{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return []User{}, errors.New("the server returned an unknown status code")
    }
}



func NewChannelReactionTag(httpClient *http.Client, parser *sdkgen.Parser) *ChannelReactionTag {
	return &ChannelReactionTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
