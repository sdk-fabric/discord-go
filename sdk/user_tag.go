
// UserTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type UserTag struct {
    internal *sdkgen.TagAbstract
}



// Get Returns the user object of the requester&#039;s account. For OAuth2, this requires the identify scope, which will return the object without an email, and optionally the email scope, which returns the object with an email.
func (client *UserTag) Get() (User, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/users/@me", pathParams))
    if err != nil {
        return User{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return User{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return User{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return User{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data User
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return User{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewUserTag(httpClient *http.Client, parser *sdkgen.Parser) *UserTag {
	return &UserTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
